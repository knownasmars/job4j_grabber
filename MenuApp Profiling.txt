**********************************************************************************
Анализ работы сборщиков мусора над приложением Menu 
Сборщики: Parallel, G1, ZGC
**********************************************************************************
На приложенных скриншотах: 
  (1) Сортировка слиянием
  (2) Сортировка методом вставки
  (3) Сортировка пузырьком

**********************************************************************************
1) ParallelGC

- Перед запуском смотрим в Sampler на текущие показатели памяти:
  int[] = ~ 300 000 byte.
- Heap загружается примерно от 4,7 MB до 6,8 MB, затем сборщик очищает
  и загрузка снова снижается. 
- Далее запускаем программу и создаем массив на 250 000 элементов.
  Теперь int[] 1 300 000+ byte.
  Прозошли 2 резких скачка на 12:01:45-12:01:46 с 6,2 MB до 22,7 MB и 
  на 12:02:27-12:02:28 с 7 MB на 22,8 MB (не понятно почему)
- Теперь запустим сортировки и посмотрим за изменением данных

----------------------------------------------------------------------------------
  Сортировка слиянием
----------------------------------------------------------------------------------
  MergeSort Начало сортировки - 12:08:14.917434100
  MergeSort Конец сортировки - 12:08:14.976765700
  - int[] стал 3 200 000+ byte.
  - Теперь Heap загружается в среднем с 7,5 MB до 9 MB, после сборщик 
    разгружает память.
  - Также видно, что параллельный сборщик не нагружает процессор, но
    при этом отработал быстро, меньше 1 секунды.

----------------------------------------------------------------------------------
  Сортировка методом вставки
----------------------------------------------------------------------------------
  InsertSort Начало сортировки - 12:16:10.461431700
  InsertSort Конец сортировки - 12:16:13.758185400
  - Время сортировки заняло чуть больше 3 секунд.
  - int[] вырос незначительно (на 100 000 - 200 000 byte) без существенных
    накладных расходов. Никакие массивы больше не создаются.
  - Замечен скачок роста расходуемой памяти. Теперь Heap используется на
    10 MB. 
  - Замечено снижение частоты сборки мусора (было в районе 10-15 секунд, а
    стало в районе 20 сек)
  - Увеличился объем собираемого мусора (ранее при сборе память разгружалась
    с 9 MB до 7 MB, сейчас с 10 MB до 7 MB)
  - Замечен скачок в нагрузки процессора во время сборки на 9%. Данная
    сортировка наиболее затратная.
    
----------------------------------------------------------------------------------
  Сортировка пузырьком
----------------------------------------------------------------------------------
  BubbleSort Начало сортировки - 12:29:59.088703400
  BubbleSort Конец сортировки - 12:31:03.230869300
  - Время сортировки заняло 1 минуту 1 секунду.
  - Видим, что int[] уменьшен до 2 300 000 byte, поскольку очищены лишние клоны.
  - Нагрузка процессора на весь период сортировки (минута) выросла на 8,7%.
  - Данная сортировка почти не отразилась на Heap. Но именно на этой сортировке
    была запущена первая полная сборка (память разгружена почти на 4 MB 
    с 10,4 до 6,5).
    Далее Heap примерно с той же частотой и объемом, но без лишнего мусора. 
    Теперь используется на 6,5 MB и загружается до 9,2 MB после чего сборщик 
    освобождает ее.
----------------------------------------------------------------------------------
  Выводы
----------------------------------------------------------------------------------
  Анализируя лог файл можно сказать, что:
  - За весь период оценки работы GC было 3 остановки для ПОЛНОЙ сборки. 
    [3.995s][info][gc] GC(7) Pause Full (Ergonomics) 6M->4M(11M) 8.358ms
    [512.751s][info][gc] GC(47) Pause Full (Ergonomics) 7M->6M(11M) 14.667ms
    [1822.395s][info][gc] GC(105) Pause Full (Ergonomics) 7M->5M(11M) 11.165ms
  - Вторая сборка мусора заняла больше всех времени ~14.7 мс
  - Заметно, что на во всех 3 сборках примерно очищаемый объем памяти 1.5-2 MB.
  - Общее время затраченно на все полные сборки незначительно
  - Больше всего памяти потребовалось сортировке "Методом вставки", 
    в результате чего использование Heap выросло до 10 МБ.
  - Больше всего ресурсов процесоор забрала сортировка "пузырьком".
    Увеличила загрузку процессора на 8.7%, как и сортировка "методом вставки",
    но время на использование ресурсов потребовалось больше.

  


